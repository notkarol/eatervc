#!/usr/bin/env python3
import numpy

###################################################################################################
# Local variables for configuration
name = 'gecco'
s = 2.0
l = s * 8.
r = s / 4.
p = numpy.pi

### FIXED SETTINGS ################################################################################
# shapes 1=box 2=cylinder 3=capsule, 4=sphere
rbodys = [[0, 75., 10., 75., 0., -10., 0., 0., 0., 0., 1, 0., 1., 1.], # ground
          [1, s, s / 2, s, 0., s / 2, 0., 0., 0., 0., 1, 0., 1., 1.], # chassis
          [2, l, r, 0., 0 - r - l / 2, s - r, 0 - s - r,             0., p /  2, p / -2, 3, s / 15, 1., 1.],
          [3, l, r, 0., 0 + r + l / 2, s + r, 0 - s - r,             0., p / -2, p / -2, 3, s / 15, 1., 1.],
          [4, l, r, 0., 0 - r * 3 - l, s - r, 0 - s - r * 2 - l / 2, 0., 0.,      p / 2, 3, s / 15, 1., 1.],
          [5, l, r, 0., 0 + r * 3 + l, s + r, 0 - s - r * 2 - l / 2, 0., 0.,      p / 2, 3, s / 15, 1., 1.],
          [6, 0.0, s, s, 0.0, s, 0.0, 0., 0., 0., 2, 0.2, 0.5, 1.0]] #stone
joints = [[0, 1, 2, 0 - r,         s - r, 0 - s - r, 0, 1, 0, 1, -1 * p, 0., p / -2, s],
          [1, 2, 4, 0 - r * 3 - l, s - r, 0 - s - r, 0, 1, 0, 1, -1 * p, 0., p / -2, s],
          [2, 3, 1, 0 + r,         s + r, 0 - s - r, 0, 1, 0, 1, -1 * p, 0., p / -2, s],
          [3, 5, 3, 0 + r * 3 + l, s + r, 0 - s - r, 0, 1, 0, 1, -1 * p, 0., p / -2, s]]


### VARIABLES #####################################################################################
useii = {'f0': 0} # An alternative fitness function

# Settings of the world and evolutionary algorithm
worlds = {'w000': [0, -100., -100., -100., 100., 100., 100., 0.00,     1, 512, 0.1], #  test
          'w040': [0, -100., -100., -100., 100., 100., 100., 0.25, 40000, 512, 0.1], # 
          'w060': [0, -100., -100., -100., 100., 100., 100., 0.25, 60000, 512, 0.1], # 
          'w080': [0, -100., -100., -100., 100., 100., 100., 0.25, 80000, 512, 0.1], # 
          'w320': [0, -100., -100., -100., 100., 100., 100., 0.25,320000, 512, 0.1]} # 

# Brain
brains = {'b55r': [0, 5, 5, 5, 1, 1.]}

# Vision
# sW is the radial vision used for the paper
sussexs = {'sW': [[0, 0., s * 1.75, 0., 30., -1 * p / 8, p / 2, 5, 1, 5 * p / 180, 0],
                  [1, 0., s * 1.75, 0., 30.,  1 * p / 8, p / 2, 5, 1, 5 * p / 180, 0],
                  [2, 0., s * 1.75, 0., 30., -3 * p / 8, p / 2, 5, 1, 5 * p / 180, 0],
                  [3, 0., s * 1.75, 0., 30.,  3 * p / 8, p / 2, 5, 1, 5 * p / 180, 0]]}

# Frankly this part is way too complex and we'll need to update it
# actions 1=update_neurons, 2=update_brain, 3=motor, 4=store
# types 1=world, 2=rigid, 3=joint, 4=brain, 5=random, 6=sussex, 7=calculation 
# operations 0=param_value, 1=get_value, 2=combine_get_values
# id, atype, start, end, operation, position, parameter, ... ...
actions = {# id aty s   e op  pos par ty el id ty el id
    'aV5': [[ 0, 1, 0., 1., 0., 0., 0, 0, 1., 0, 0, 0, 0, 0, 0], # Bias
            [ 1, 1, 0., 1., 0., 1., 1, 1, 0., 6, 0, 0, 0, 0, 0], # sussex 0
            [ 2, 1, 0., 1., 0., 1., 1, 2, 0., 6, 0, 1, 0, 0, 0], # sussex 1
            [ 3, 1, 0., 1., 0., 1., 1, 3, 0., 6, 0, 2, 0, 0, 0], # sussex 2
            [ 4, 1, 0., 1., 0., 1., 1, 4, 0., 6, 0, 3, 0, 0, 0], # sussex 3
            [ 5, 2, 0., 1., 0., 1., 1, 0, 0., 0, 0, 0, 0, 0, 0], # brain
            [ 6, 3, 0., 1., 0., 1., 1, 0, 0., 4, 3, 0, 0, 0, 0], # motor
            [ 7, 3, 0., 1., 0., 1., 1, 1, 1., 4, 3, 0, 0, 0, 0], # motor
            [ 8, 3, 0., 1., 0., 1., 1, 2, 2., 4, 3, 0, 0, 0, 0], # motor
            [ 9, 3, 0., 1., 0., 1., 1, 3, 3., 4, 3, 0, 0, 0, 0], # motor
            [10, 4, 0., 1., .9, 1., 1, 0, 4., 4, 4, 0, 0, 0, 0], # dit
            [11, 4, 0., 1., 1., 1., 1, 1, 0., 4, 2, 0, 0, 0, 0], # hidden 0
            [12, 4, 0., 1., 1., 1., 1, 2, 1., 4, 2, 0, 0, 0, 0], # hidden 1
            [13, 4, 0., 1., 1., 1., 1, 3, 2., 4, 2, 0, 0, 0, 0], # hidden 2
            [14, 4, 0., 1., 1., 1., 1, 4, 3., 4, 2, 0, 0, 0, 0], # hidden 3
            [15, 4, 0., 1., 1., 1., 1, 5, 4., 4, 2, 0, 0, 0, 0], # hidden 4
            [16, 4, 0., 1., 1., 1., 1, 6, 0., 2, 4, 6, 0, 0, 0], # stone x
            [17, 4, 0., 1., 1., 1., 1, 7, 0., 2, 6, 6, 0, 0, 0], # stone z
            [18, 4, 0., 1., 0., 1., 1, 8, 4., 4, 4, 0, 0, 0, 0]],# fit
    
    'aP5': [[ 0, 1, 0., 1., 0., 0., 0, 0, 1., 0, 0, 0, 0, 0, 0], # Bias
            [ 1, 1, 0., 1., 0., 1., 1, 1, 0., 3, 0, 0, 0, 0, 0], # prop 0
            [ 2, 1, 0., 1., 0., 1., 1, 2, 0., 3, 0, 1, 0, 0, 0], # prop 1
            [ 3, 1, 0., 1., 0., 1., 1, 3, 0., 3, 0, 2, 0, 0, 0], # prop 2
            [ 4, 1, 0., 1., 0., 1., 1, 4, 0., 3, 0, 3, 0, 0, 0], # prop 3
            [ 5, 2, 0., 1., 0., 1., 1, 0, 0., 0, 0, 0, 0, 0, 0], # brain
            [ 6, 3, 0., 1., 0., 1., 1, 0, 0., 4, 3, 0, 0, 0, 0], # motor
            [ 7, 3, 0., 1., 0., 1., 1, 1, 1., 4, 3, 0, 0, 0, 0], # motor
            [ 8, 3, 0., 1., 0., 1., 1, 2, 2., 4, 3, 0, 0, 0, 0], # motor
            [ 9, 3, 0., 1., 0., 1., 1, 3, 3., 4, 3, 0, 0, 0, 0], # motor
            [10, 4, 0., 1., .9, 1., 1, 0, 4., 4, 4, 0, 0, 0, 0], # dit
            [11, 4, 0., 1., 1., 1., 1, 1, 0., 4, 2, 0, 0, 0, 0], # hidden 0
            [12, 4, 0., 1., 1., 1., 1, 2, 1., 4, 2, 0, 0, 0, 0], # hidden 1
            [13, 4, 0., 1., 1., 1., 1, 3, 2., 4, 2, 0, 0, 0, 0], # hidden 2
            [14, 4, 0., 1., 1., 1., 1, 4, 3., 4, 2, 0, 0, 0, 0], # hidden 3
            [15, 4, 0., 1., 1., 1., 1, 5, 4., 4, 2, 0, 0, 0, 0], # hidden 4
            [16, 4, 0., 1., 1., 1., 1, 6, 0., 2, 4, 6, 0, 0, 0], # stone x
            [17, 4, 0., 1., 1., 1., 1, 7, 0., 2, 6, 6, 0, 0, 0], # stone z
            [18, 4, 0., 1., 0., 1., 1, 8, 4., 4, 4, 0, 0, 0, 0]],# fit

    'aX5': [[ 0, 1, 0., 1., 0., 0., 0, 0, 1., 0, 0, 0, 0, 0, 0], # Bias
            [ 1, 1, 0., .3, 0., 1., 1, 1, 0., 3, 0, 0, 0, 0, 0], # prop 0
            [ 2, 1, 0., .3, 0., 1., 1, 2, 0., 3, 0, 1, 0, 0, 0], # prop 1
            [ 3, 1, 0., .3, 0., 1., 1, 3, 0., 3, 0, 2, 0, 0, 0], # prop 2
            [ 4, 1, 0., .3, 0., 1., 1, 4, 0., 3, 0, 3, 0, 0, 0], # prop 3
            [ 5, 1, .3, .9, 0., 1., 3, 1, 1., 3, 0, 0, 6, 0, 0], # p2v 0
            [ 6, 1, .3, .9, 0., 1., 3, 2, 1., 3, 0, 1, 6, 0, 1], # p2v 1
            [ 7, 1, .3, .9, 0., 1., 3, 3, 1., 3, 0, 2, 6, 0, 2], # p2v 2
            [ 8, 1, .3, .9, 0., 1., 3, 4, 1., 3, 0, 3, 6, 0, 3], # p2v 3
            [ 9, 1, .9, 1., 0., 1., 1, 1, 0., 6, 0, 0, 0, 0, 0], # susx 0
            [10, 1, .9, 1., 0., 1., 1, 2, 0., 6, 0, 1, 0, 0, 0], # susx 1
            [11, 1, .9, 1., 0., 1., 1, 3, 0., 6, 0, 2, 0, 0, 0], # susx 2
            [12, 1, .9, 1., 0., 1., 1, 4, 0., 6, 0, 3, 0, 0, 0], # susx 3
            [13, 2, 0., 1., 0., 1., 1, 0, 0., 0, 0, 0, 0, 0, 0], # brain
            [14, 3, 0., 1., 0., 1., 1, 0, 0., 4, 3, 0, 0, 0, 0], # motor
            [15, 3, 0., 1., 0., 1., 1, 1, 1., 4, 3, 0, 0, 0, 0], # motor
            [16, 3, 0., 1., 0., 1., 1, 2, 2., 4, 3, 0, 0, 0, 0], # motor
            [17, 3, 0., 1., 0., 1., 1, 3, 3., 4, 3, 0, 0, 0, 0], # motor
            [18, 4, 0., 1., .9, 1., 1, 0, 4., 4, 4, 0, 0, 0, 0], # dit
            [19, 4, 0., 1., 1., 1., 1, 1, 0., 4, 2, 0, 0, 0, 0], # hidden 0
            [20, 4, 0., 1., 1., 1., 1, 2, 1., 4, 2, 0, 0, 0, 0], # hidden 1
            [21, 4, 0., 1., 1., 1., 1, 3, 2., 4, 2, 0, 0, 0, 0], # hidden 2
            [22, 4, 0., 1., 1., 1., 1, 4, 3., 4, 2, 0, 0, 0, 0], # hidden 3
            [23, 4, 0., 1., 1., 1., 1, 5, 4., 4, 2, 0, 0, 0, 0], # hidden 4
            [24, 4, 0., 1., 1., 1., 1, 6, 0., 2, 4, 6, 0, 0, 0], # stone x
            [25, 4, 0., 1., 1., 1., 1, 7, 0., 2, 6, 6, 0, 0, 0], # stone z
            [26, 4, 0., 1., 0., 1., 1, 8, 4., 4, 4, 0, 0, 0, 0]],# fit

    'aN5': [[ 0, 1, 0., 1., 0., 0., 0, 0, 1., 0, 0, 0, 0, 0, 0], # Bias
            [ 1, 1, 0., .5, 0., 1., 1, 1, 0., 3, 0, 0, 0, 0, 0], # prop 0
            [ 2, 1, 0., .5, 0., 1., 1, 2, 0., 3, 0, 1, 0, 0, 0], # prop 1
            [ 3, 1, 0., .5, 0., 1., 1, 3, 0., 3, 0, 2, 0, 0, 0], # prop 2
            [ 4, 1, 0., .5, 0., 1., 1, 4, 0., 3, 0, 3, 0, 0, 0], # prop 3
            [ 5, 1, .5, 1., 0., 1., 1, 1, 0., 6, 0, 0, 0, 0, 0], # susx 0
            [ 6, 1, .5, 1., 0., 1., 1, 2, 0., 6, 0, 1, 0, 0, 0], # susx 1
            [ 7, 1, .5, 1., 0., 1., 1, 3, 0., 6, 0, 2, 0, 0, 0], # susx 2
            [ 8, 1, .5, 1., 0., 1., 1, 4, 0., 6, 0, 3, 0, 0, 0], # susx 3
            [ 9, 2, 0., 1., 0., 1., 1, 0, 0., 0, 0, 0, 0, 0, 0], # brain
            [10, 3, 0., 1., 0., 1., 1, 0, 0., 4, 3, 0, 0, 0, 0], # motor
            [11, 3, 0., 1., 0., 1., 1, 1, 1., 4, 3, 0, 0, 0, 0], # motor
            [12, 3, 0., 1., 0., 1., 1, 2, 2., 4, 3, 0, 0, 0, 0], # motor
            [13, 3, 0., 1., 0., 1., 1, 3, 3., 4, 3, 0, 0, 0, 0], # motor
            [14, 4, 0., 1., .9, 1., 1, 0, 4., 4, 4, 0, 0, 0, 0], # dit
            [15, 4, 0., 1., 1., 1., 1, 1, 0., 4, 2, 0, 0, 0, 0], # hidden 0
            [16, 4, 0., 1., 1., 1., 1, 2, 1., 4, 2, 0, 0, 0, 0], # hidden 1
            [17, 4, 0., 1., 1., 1., 1, 3, 2., 4, 2, 0, 0, 0, 0], # hidden 2
            [18, 4, 0., 1., 1., 1., 1, 4, 3., 4, 2, 0, 0, 0, 0], # hidden 3
            [19, 4, 0., 1., 1., 1., 1, 5, 4., 4, 2, 0, 0, 0, 0], # hidden 4
            [20, 4, 0., 1., 1., 1., 1, 6, 0., 2, 4, 6, 0, 0, 0], # stone x
            [21, 4, 0., 1., 1., 1., 1, 7, 0., 2, 6, 6, 0, 0, 0], # stone z
            [22, 4, 0., 1., 0., 1., 1, 8, 4., 4, 4, 0, 0, 0, 0]],# fit

    'aS5': [[ 0, 1, 0., 1., 0., 0., 0, 0, 1., 0, 0, 0, 0, 0, 0], # Bias
            [ 1, 1, 0., .3, 0., 1., 1, 1, 0., 3, 0, 0, 0, 0, 0], # prop 0
            [ 2, 1, 0., .3, 0., 1., 1, 2, 0., 3, 0, 1, 0, 0, 0], # prop 1
            [ 3, 1, 0., .3, 0., 1., 1, 3, 0., 3, 0, 2, 0, 0, 0], # prop 2
            [ 4, 1, 0., .3, 0., 1., 1, 4, 0., 3, 0, 3, 0, 0, 0], # prop 3
            [ 5, 1, .3, .9, 0., 1., 5, 1, 1., 3, 0, 0, 6, 0, 0], # p2v 0
            [ 6, 1, .3, .9, 0., 1., 5, 2, 1., 3, 0, 1, 6, 0, 1], # p2v 1
            [ 7, 1, .3, .9, 0., 1., 5, 3, 1., 3, 0, 2, 6, 0, 2], # p2v 2
            [ 8, 1, .3, .9, 0., 1., 5, 4, 1., 3, 0, 3, 6, 0, 3], # p2v 3
            [ 9, 1, .9, 1., 0., 1., 1, 1, 0., 6, 0, 0, 0, 0, 0], # susx 0
            [10, 1, .9, 1., 0., 1., 1, 2, 0., 6, 0, 1, 0, 0, 0], # susx 1
            [11, 1, .9, 1., 0., 1., 1, 3, 0., 6, 0, 2, 0, 0, 0], # susx 2
            [12, 1, .9, 1., 0., 1., 1, 4, 0., 6, 0, 3, 0, 0, 0], # susx 3
            [13, 2, 0., 1., 0., 1., 1, 0, 0., 0, 0, 0, 0, 0, 0], # brain
            [14, 3, 0., 1., 0., 1., 1, 0, 0., 4, 3, 0, 0, 0, 0], # motor
            [15, 3, 0., 1., 0., 1., 1, 1, 1., 4, 3, 0, 0, 0, 0], # motor
            [16, 3, 0., 1., 0., 1., 1, 2, 2., 4, 3, 0, 0, 0, 0], # motor
            [17, 3, 0., 1., 0., 1., 1, 3, 3., 4, 3, 0, 0, 0, 0], # motor
            [18, 4, 0., 1., .9, 1., 1, 0, 4., 4, 4, 0, 0, 0, 0], # dit
            [19, 4, 0., 1., 1., 1., 1, 1, 0., 4, 2, 0, 0, 0, 0], # hidden 0
            [20, 4, 0., 1., 1., 1., 1, 2, 1., 4, 2, 0, 0, 0, 0], # hidden 1
            [21, 4, 0., 1., 1., 1., 1, 3, 2., 4, 2, 0, 0, 0, 0], # hidden 2
            [22, 4, 0., 1., 1., 1., 1, 4, 3., 4, 2, 0, 0, 0, 0], # hidden 3
            [23, 4, 0., 1., 1., 1., 1, 5, 4., 4, 2, 0, 0, 0, 0], # hidden 4
            [24, 4, 0., 1., 1., 1., 1, 6, 0., 2, 4, 6, 0, 0, 0], # stone x
            [25, 4, 0., 1., 1., 1., 1, 7, 0., 2, 6, 6, 0, 0, 0], # stone z
            [26, 4, 0., 1., 0., 1., 1, 8, 4., 4, 4, 0, 0, 0, 0]],# fit

    'aC5': [[ 0, 1, 0., 1., 0., 0., 0, 0, 1., 0, 0, 0, 0, 0, 0], # Bias
            [ 1, 1, 0., .3, 0., 1., 1, 1, 0., 3, 0, 0, 0, 0, 0], # prop 0
            [ 2, 1, 0., .3, 0., 1., 1, 2, 0., 3, 0, 1, 0, 0, 0], # prop 1
            [ 3, 1, 0., .3, 0., 1., 1, 3, 0., 3, 0, 2, 0, 0, 0], # prop 2
            [ 4, 1, 0., .3, 0., 1., 1, 4, 0., 3, 0, 3, 0, 0, 0], # prop 3
            [ 5, 1, .3, .9, 0., 1., 6, 1, 1., 3, 0, 0, 6, 0, 0], # p2v 0
            [ 6, 1, .3, .9, 0., 1., 6, 2, 1., 3, 0, 1, 6, 0, 1], # p2v 1
            [ 7, 1, .3, .9, 0., 1., 6, 3, 1., 3, 0, 2, 6, 0, 2], # p2v 2
            [ 8, 1, .3, .9, 0., 1., 6, 4, 1., 3, 0, 3, 6, 0, 3], # p2v 3
            [ 9, 1, .9, 1., 0., 1., 1, 1, 0., 6, 0, 0, 0, 0, 0], # susx 0
            [10, 1, .9, 1., 0., 1., 1, 2, 0., 6, 0, 1, 0, 0, 0], # susx 1
            [11, 1, .9, 1., 0., 1., 1, 3, 0., 6, 0, 2, 0, 0, 0], # susx 2
            [12, 1, .9, 1., 0., 1., 1, 4, 0., 6, 0, 3, 0, 0, 0], # susx 3
            [13, 2, 0., 1., 0., 1., 1, 0, 0., 0, 0, 0, 0, 0, 0], # brain
            [14, 3, 0., 1., 0., 1., 1, 0, 0., 4, 3, 0, 0, 0, 0], # motor
            [15, 3, 0., 1., 0., 1., 1, 1, 1., 4, 3, 0, 0, 0, 0], # motor
            [16, 3, 0., 1., 0., 1., 1, 2, 2., 4, 3, 0, 0, 0, 0], # motor
            [17, 3, 0., 1., 0., 1., 1, 3, 3., 4, 3, 0, 0, 0, 0], # motor
            [18, 4, 0., 1., .9, 1., 1, 0, 4., 4, 4, 0, 0, 0, 0], # dit
            [19, 4, 0., 1., 1., 1., 1, 1, 0., 4, 2, 0, 0, 0, 0], # hidden 0
            [20, 4, 0., 1., 1., 1., 1, 2, 1., 4, 2, 0, 0, 0, 0], # hidden 1
            [21, 4, 0., 1., 1., 1., 1, 3, 2., 4, 2, 0, 0, 0, 0], # hidden 2
            [22, 4, 0., 1., 1., 1., 1, 4, 3., 4, 2, 0, 0, 0, 0], # hidden 3
            [23, 4, 0., 1., 1., 1., 1, 5, 4., 4, 2, 0, 0, 0, 0], # hidden 4
            [24, 4, 0., 1., 1., 1., 1, 6, 0., 2, 4, 6, 0, 0, 0], # stone x
            [25, 4, 0., 1., 1., 1., 1, 7, 0., 2, 6, 6, 0, 0, 0], # stone z
            [26, 4, 0., 1., 0., 1., 1, 8, 4., 4, 4, 0, 0, 0, 0]]}# fit


sizes = [1.2 * s, 1.8 * s]
conds = {'vH4': [[sizes[0], -3.0 * s, -6.5 * s],
                 [sizes[0],  3.0 * s, -6.5 * s],
                 [sizes[1], -3.0 * s, -6.5 * s],
                 [sizes[1],  3.0 * s, -6.5 * s]],
         'vV4': [[sizes[0],  0.0 * s, -5.75 * s],
                 [sizes[0],  0.0 * s, -7.25 * s],
                 [sizes[1],  0.0 * s, -5.75 * s],
                 [sizes[1],  0.0 * s, -7.25 * s]],
         'vA4': [[sizes[0], -3.0 * s, -5.75 * s],
                 [sizes[0],  3.0 * s, -7.25 * s],
                 [sizes[1], -3.0 * s, -7.25 * s],
                 [sizes[1],  3.0 * s, -5.75 * s]],
         'vH6': [[sizes[0], -4.0 * s, -6.5 * s],
                 [sizes[0],  0.0 * s, -6.5 * s],
                 [sizes[0],  4.0 * s, -6.5 * s],
                 [sizes[1], -4.0 * s, -6.5 * s],
                 [sizes[1],  0.0 * s, -6.5 * s],
                 [sizes[1],  4.0 * s, -6.5 * s]],
         'vV6': [[sizes[0],  0.0 * s, -5.75 * s],
                 [sizes[0],  0.0 * s, -6.50 * s],
                 [sizes[0],  0.0 * s, -7.25 * s],
                 [sizes[1],  0.0 * s, -5.75 * s],
                 [sizes[1],  0.0 * s, -6.50 * s],
                 [sizes[1],  0.0 * s, -7.25 * s]],
         'vA6': [[sizes[0], -4.0 * s, -7.25 * s],
                 [sizes[0],  0.0 * s, -5.75 * s],
                 [sizes[0],  4.0 * s, -7.25 * s],
                 [sizes[1], -4.0 * s, -5.75 * s],
                 [sizes[1],  0.0 * s, -7.25 * s],
                 [sizes[1],  4.0 * s, -5.75 * s]],
         'vH8': [[sizes[0], -4.5 * s, -6.5 * s],
                 [sizes[0], -1.5 * s, -6.5 * s],
                 [sizes[0],  1.5 * s, -6.5 * s],
                 [sizes[0],  4.5 * s, -6.5 * s],
                 [sizes[1], -4.5 * s, -6.5 * s],
                 [sizes[1], -1.5 * s, -6.5 * s],
                 [sizes[1],  1.5 * s, -6.5 * s],
                 [sizes[1],  4.5 * s, -6.5 * s]],
         'vA8': [[sizes[0], -4.5 * s, -7.25 * s],
                 [sizes[0], -1.5 * s, -5.75 * s],
                 [sizes[0],  1.5 * s, -7.25 * s],
                 [sizes[0],  4.5 * s, -5.75 * s],
                 [sizes[1], -4.5 * s, -5.75 * s],
                 [sizes[1], -1.5 * s, -7.25 * s],
                 [sizes[1],  1.5 * s, -5.75 * s],
                 [sizes[1],  4.5 * s, -7.25 * s]],
         'vV8': [[sizes[0],  0.0 * s, -8.375 * s],
                 [sizes[0],  0.0 * s, -7.125 * s],
                 [sizes[0],  0.0 * s, -5.875 * s],
                 [sizes[0],  0.0 * s, -4.625 * s],
                 [sizes[1],  0.0 * s, -8.375 * s],
                 [sizes[1],  0.0 * s, -7.125 * s],
                 [sizes[1],  0.0 * s, -5.875 * s],
                 [sizes[1],  0.0 * s, -4.625 * s]],
         'v32': [[x,y,z] for x in sizes for y in numpy.linspace(-6 * s, 6 * s, 4) for z in numpy.linspace(-9 * s, -4 * s, 4)],
         'v00': [[x,y,z] for x in sizes for y in numpy.linspace(-6 * s, 6 * s, 13) for z in numpy.linspace(-9 * s, -4 * s, 6)]}

# Which attributes will change (radius, x, z)               
variators = [[1, 2, 2, 7],
             [2, 2, 4, 7],
             [3, 2, 6, 7]]

# Prepare a list of phenotypes. Prepopulate with test
phenotypes = [['w000', 'aP5', 'v00', 'sW', 'f0', 'b55r', [], []],
              ['w000', 'aV5', 'v00', 'sW', 'f0', 'b55r', [], []]]
s = 'sW'
f = 'f0'
b = 'b55r'
for cond in conds:
    for world in worlds:
        if world[2] != cond[2]: continue
        for action in actions:
            phenotypes.append([world, action, cond, s, f, b, [], []])

# Populate the database based on our phenotypes
num_goals = len(sizes)
goals = [x / num_goals for x in numpy.linspace(1 - num_goals, num_goals - 1, num_goals)]
training = 0
for setting in phenotypes:
    vari = setting[2]
    for i, cond in enumerate(conds[vari]):
        cond_id = i + 1
        goal = goals[sizes.index(cond[0])] # the first item in each cond is our goal
        setting[-2].append([cond_id, goal, training])
        for j, val in enumerate(cond):
            vari_id = j + 1
            setting[-1].append([cond_id, vari_id, val])
    
